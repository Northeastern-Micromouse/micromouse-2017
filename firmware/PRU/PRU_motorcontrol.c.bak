#include <stdint.h>
#include <pru_cfg.h>
#include <pru_intc.h>
#include <pru_rpmsg.h>
#include "resource_table.h"

#define VIRTIO_CONFIG_S_DRIVER_OK 4

#define MM_MOTOR_LEFT (1 << 0)
#define MM_MOTOR_RIGHT (1 << 1)

volatile register uint32_t __R30;
volatile register uint32_t __R31;

// Number of discrete motions a single drive command will be divided into
#define DRIVE_DIVISIONS 10

// Hardware constants
#define MICROSTEPPING		16
#define RADIANS_PER_STEP 	((1.8 / MICROSTEPPING) * M_PI/180.0)
#define WHEEL_RADIUS 		30000
#define DISTANCE_PER_STEP	59 //RADIANS_PER_STEP*WHEEL_RADIUS

#define PID_KP 100
#define PID_KI 0
#define PID_KD 0

int32_t previous_error = 0;
int32_t integral = 0;

int32_t pid_update(int32_t error, int32_t dt) {
	
	integral += error * dt;
	
	int32_t value = PID_KP*error +
				PID_KI*integral +
				PID_KD*(error/dt);
				
	previous_error = error;
	
	return value;
}

void pid_reset() {
	integral = 0;
	previous_error = 0;
}

void move(uint32_t stepsLeft, uint32_t stepsRight, uint32_t usLeft, uint32_t usRight) {
	
}

void main(void)
{
	
	struct pru_rpmsg_transport transport;
	unsigned short src, dst, len;
	volatile unsigned char* status;
	unsigned char payload[RPMSG_BUF_SIZE];
		
	/* Clear SYSCFG[STANDBY_INIT] to enable OCP master port */
	CT_CFG.SYSCFG_bit.STANDBY_INIT = 0;	
	CT_INTC.SICR_bit.STS_CLR_IDX = FROM_ARM_HOST;
	
	status = &resourceTable.rpmsg_vdev.status;
	while(!(*status & VIRTIO_CONFIG_S_DRIVER_OK));
	
	pru_rpmsg_init(&transport, &resourceTable.rpmsg_vring0, &resourceTable.rpmsg_vring1, TO_ARM_HOST, FROM_ARM_HOST);
	while (pru_rpmsg_channel(RPMSG_NS_CREATE, &transport, CHAN_NAME, CHAN_DESC, CHAN_PORT) != PRU_RPMSG_SUCCESS);
	
	for(;;) {
		if(__R31 & HOST_INT) {
			
			if (pru_rpmsg_receive(&transport, &src, &dst, payload, &len) == PRU_RPMSG_SUCCESS) {
				
				// in microns
				uint32_t distance = payload[0] | 
									(payload[1] << 8) | 
									(payload[2] << 16) | 
									(payload[3] << 24);
				// microns / s
				uint32_t speed = payload[4] | 
									(payload[5] << 8) | 
									(payload[6] << 16) | 
									(payload[7] << 24);				
				
				uint32_t error = 0;
				
				pid_reset();
				
				int i = 0;
				for(; i < DRIVE_DIVISIONS; i++) {
					
					if (i != 0 &&
							pru_rpmsg_receive(&transport, &src, &dst, payload, &len) == PRU_RPMSG_SUCCESS) {
						error = payload[0] | 
								(payload[1] << 8) | 
								(payload[2] << 16) | 
								(payload[3] << 24);
					}
					
					//int32_t offset = pid_update(error, 
												//1);
					
					int32_t leftDistance = distance / DRIVE_DIVISIONS ;//+ offset;
					int32_t rightDistance = distance / DRIVE_DIVISIONS ;//- offset;
					
					// First, figure out how much time the entire operation will take using the
					// given velocity
					int32_t time = ((leftDistance + rightDistance) / 2) / speed;
					
					// Now compute the left and right velocities, and accordingly the time per
					// step of the left and right wheels
					int32_t leftVelocity = leftDistance / time;
					int32_t rightVelocity = rightDistance / time;
						
					// (rad/step) / (rad/s) = (s/step)
					// Also calculate required angular velocity
					// v = rw -> w = r/v
					int32_t usLeft = (uint32_t)((DISTANCE_PER_STEP * 1000000)/ 
											leftVelocity );
					int32_t usRight = (uint32_t)((DISTANCE_PER_STEP * 1000000) / 
											rightVelocity );
						
					int32_t stepsLeft = leftDistance / DISTANCE_PER_STEP;
					int32_t stepsRight = rightDistance / DISTANCE_PER_STEP;
					
					// Since steps represents number of desired falling edges,
					// multiply by 2 so that we can decrement on both edges
					
					stepsLeft *= 2;
					stepsRight *= 2;
					
					int leftCounter = usLeft;
					int rightCounter = usRight;
					
					// While there are remaining steps, loop every half microsecond
					// If it's time to toggle, do so. Otherwise decrement the 
					// counter and continue
					uint32_t errorReq = 3 * stepsLeft;
					errorReq /= 4;
					while(stepsLeft || stepsRight) {
						if(stepsLeft && !leftCounter) {
							__R30 ^= MM_MOTOR_LEFT;
							stepsLeft--;
							leftCounter = usLeft;
						}
						if(stepsRight && !rightCounter) {
							__R30 ^= MM_MOTOR_RIGHT;
							stepsRight--;
							rightCounter = usRight;
						}
						
						// Halfway through the move, request new data
						if(stepsLeft == errorReq) {
							pru_rpmsg_send(&transport,dst, src, "E", 1);
						}
						
						leftCounter--;
						rightCounter--;
						__delay_cycles(100);
						
						
					}
					
				}
				
				// Report all done to the host
				pru_rpmsg_send(&transport,dst, src, "K", 1);
			}
			else {
				CT_INTC.SICR_bit.STS_CLR_IDX = FROM_ARM_HOST;
			}
		}
	}
}

