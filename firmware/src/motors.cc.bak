#include <fcntl.h>
#include <unistd.h>
#include "motors.h"

namespace micromouse {
	
MotorSystem::MotorSystem(std::string pruFile,
							GpioDevice* leftDirPin,
							GpioDevice* rightDirPin,
							GpioDevice* enablePin):
							_pruFile(pruFile),
							_leftDirPin(leftDirPin),
							_rightDirPin(rightDirPin),
							_enablePin(enablePin) {}
			
void MotorSystem::enable() {
	this->_enablePin->setValue(0);
}

void MotorSystem::disable() {
	this->_enablePin->setValue(1);
}
			
int MotorSystem::beginDrive(unsigned int distance,
						unsigned int speed,
						unsigned int directionLeft,
						unsigned int directionRight) {
							
	unsigned char data[] = {(unsigned char)(distance & 0xFF), 
							(unsigned char)((distance & 0x0000FF00) >> 8),
							(unsigned char)((distance & 0x00FF0000) >> 16),
							(unsigned char)((distance & 0xFF000000) >> 24),
							(unsigned char)((speed & 0x000000FF)),
							(unsigned char)((speed & 0x0000FF00) >> 8),
							(unsigned char)((speed & 0x00FF0000) >> 16),
							(unsigned char)((speed & 0xFF000000) >> 24) };
							
	if(directionLeft) {
		this->_leftDirPin->setValue(!MOTOR_INVERT_LEFT);
	}
	else {
		this->_leftDirPin->setValue(MOTOR_INVERT_LEFT);
	}
	
	if(directionRight) {
		this->_rightDirPin->setValue(!MOTOR_INVERT_RIGHT);
	}
	else {
		this->_rightDirPin->setValue(MOTOR_INVERT_RIGHT);
	}
	
	int pruFileFd = open(_pruFile.c_str(), O_RDWR);
    if (pruFileFd < 0) {
		std::cout << "Error opening PRU0 RPMSG file." << std::endl;
        return pruFileFd;
	}
	
	int error;
	if((error = write(pruFileFd, data, 8)) != 8) {
		close(pruFileFd);
		std::cout << "Error writing PRU0 file, returned " << error << std::endl;
		return error;
	}
	
	close(pruFileFd);
	return 0;
}

int MotorSystem::writePRU(int data) {
	int pruFileFd = open(_pruFile.c_str(), O_RDWR);
	int retval = write(pruFileFd, &data, 1) != 1;
	close(pruFileFd);
	return retval;
}

int MotorSystem::readPRU(int* data) {
	int pruFileFd = open(_pruFile.c_str(), O_RDWR);
	int retval = read(pruFileFd, data, 1) != 1;
	close(pruFileFd);
	return retval;
}

int MotorSystem::requestedError(bool* result) {
	int data;
	int error = this->readPRU(&data);
	*result = (data == 'E');
	return error;
}

int MotorSystem::finished(bool* result) {
	int data;
	int error = this->readPRU(&data);
	*result = (data == 'K');
	return error;
}

}